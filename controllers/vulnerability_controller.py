import requests
from models.vulnerability_model import VulnerabilityModel
import logging
import json

class VulnerabilityController:
    def __init__(self, view):
        self.model = VulnerabilityModel()
        self.view = view
        logging.basicConfig(level=logging.INFO)

    def add_vulnerability(self, cve_id, severity, description):
        self.model.add_vulnerability(cve_id, severity, description)
        self.view.load_data()

    def get_all_vulnerabilities(self, start_index, end_index):
        return self.model.get_all_vulnerabilities(start_index, end_index)

    def search_vulnerabilities(self, query, start_index, end_index):
        return self.model.search_vulnerabilities(query, start_index, end_index)

    def update_vulnerability(self, vulnerability_id, cve_id, severity, description):
        self.model.update_vulnerability(vulnerability_id, cve_id, severity, description)
        self.view.load_data()

    def delete_vulnerability(self, vulnerability_id):
        self.model.delete_vulnerability(vulnerability_id)
        self.view.load_data()

    def get_all_vulnerabilities_for_profile_add(self):
        return self.model.get_all_vulnerabilities_for_profile_add()

    def search_vulnerabilities_for_profile_add(self, query):
        return self.model.search_vulnerabilities_for_profile_add(query)

    def get_total_vulnerabilities_count(self):
        try:
            # Fetch total record count from NVD API
            response = requests.get("https://services.nvd.nist.gov/rest/json/cves/2.0")
            response.raise_for_status()
            data = response.json()
            total_api_records = data.get("totalResults", 0)

            # Get total record count from vulnerabilities table
            total_db_records = self.model.get_total_vulnerabilities_count()

            # Calculate the difference
            total_result = total_api_records - total_db_records
            return total_result

        except (requests.RequestException, json.JSONDecodeError) as e:
            logging.error(f"Error fetching total vulnerabilities count: {e}")
            return 0

    def fetch_and_store_cve_list(self, update_progress_callback):
        base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
        results_per_page = 2000  # Maximum allowed per request
        api_key = "61e4e0e1-7069-43d7-bb1f-0e2ea9ae96e7"  # Replace with your actual API key

        headers = {
            "apiKey": api_key
        }

        # Get the last CVE ID from the database
        last_cve = self.model.get_last_inserted_record()
        last_cve_id = last_cve["CVE_ID"] if last_cve else None
        print(last_cve_id)
        start_index = 0
        while True:
            params = {
                "startIndex": start_index,
                "resultsPerPage": results_per_page,
            }

            try:
                response = requests.get(base_url, headers=headers, params=params)
                response.raise_for_status()
                data = response.json()

                if "vulnerabilities" in data and data["vulnerabilities"]:
                    for item in data["vulnerabilities"]:
                        cve = item["cve"]
                        cve_id = cve["id"]
                        description = cve["descriptions"][0]["value"]
                        severity = cve.get("metrics", {}).get("cvssMetricV2", [{}])[0].get("cvssData", {}).get(
                            "baseScore", "N/A")

                        # Skip records until the last CVE ID is found
                        if last_cve_id and cve_id <= last_cve_id:
                            continue

                        if not self.model.check_vulnerability_by_cve_id(cve_id):
                            self.model.add_vulnerability(cve_id, severity, description)
                            update_progress_callback(start_index, data["totalResults"])

                    # Increment start_index to fetch the next set of results
                    start_index += results_per_page
                else:
                    logging.info("No more vulnerabilities found.")
                    break

            except requests.exceptions.RequestException as e:
                logging.error(f"Error fetching data: {e}")
                break