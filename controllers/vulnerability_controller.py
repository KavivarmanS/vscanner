import requests
from models.vulnerability_model import VulnerabilityModel

class VulnerabilityController:
    def __init__(self, view):
        self.model = VulnerabilityModel()
        self.view = view

    def add_vulnerability(self, cve_id, severity, description):
        self.model.add_vulnerability(cve_id, severity, description)
        self.view.load_data()

    def get_all_vulnerabilities(self):
        return self.model.get_all_vulnerabilities()

    def update_vulnerability(self, vulnerability_id, cve_id, severity, description):
        self.model.update_vulnerability(vulnerability_id, cve_id, severity, description)
        self.view.load_data()

    def delete_vulnerability(self, vulnerability_id):
        self.model.delete_vulnerability(vulnerability_id)
        self.view.load_data()

    def fetch_and_store_cve_list(self):
        base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
        start_index = 0
        results_per_page = 2000  # Maximum allowed per request

        while True:
            params = {
                "startIndex": start_index,
                "resultsPerPage": results_per_page,
            }

            try:
                response = requests.get(base_url, params=params)
                response.raise_for_status()
                data = response.json()

                if "vulnerabilities" in data and data["vulnerabilities"]:
                    for item in data["vulnerabilities"]:
                        cve = item["cve"]
                        cve_id = cve["id"]
                        description = cve["descriptions"][0]["value"]
                        severity = cve.get("metrics", {}).get("cvssMetricV2", [{}])[0].get("cvssData", {}).get("baseScore", "N/A")

                        if not self.model.check_vulnerability_by_cve_id(cve_id):
                            self.model.add_vulnerability(cve_id, severity, description)

                    # Increment start_index to fetch the next set of results
                    start_index += results_per_page
                else:
                    print("No more vulnerabilities found.")
                    break

            except requests.exceptions.RequestException as e:
                print(f"Error fetching data: {e}")
                break
