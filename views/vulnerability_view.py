import tkinter as tk
from tkinter import ttk, messagebox
from controllers.vulnerability_controller import VulnerabilityController
import threading


class VulnerabilityView:
    def __init__(self, parent):
        self.parent = parent
        self.controller = VulnerabilityController(self)
        self.create_widgets()
        self.load_data()

    def create_widgets(self):
        self.frame = ttk.Frame(self.parent, padding=20)
        self.frame.pack(expand=True, fill=tk.BOTH)

        ttk.Label(self.frame, text="Vulnerability Management", font=("Arial", 20, "bold")).grid(row=0, column=0,
                                                                                                columnspan=3, pady=15)

        ttk.Label(self.frame, text="Search:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
        self.search_entry = ttk.Entry(self.frame)
        self.search_entry.grid(row=1, column=1, padx=10, pady=5, sticky="ew")
        ttk.Button(self.frame, text="Search", command=self.search_vulnerability).grid(row=1, column=2, padx=10, pady=5)

        ttk.Button(self.frame, text="Add Vulnerability", command=self.open_add_vulnerability_popup).grid(row=2,
                                                                                                         column=0,
                                                                                                         pady=10)

        self.fetch_button = ttk.Button(self.frame, text="Fetch Vulnerability", command=self.fetch_vulnerabilities)
        self.fetch_button.grid(row=2, column=1, pady=10)

        # Progress Bar (Initially Hidden)
        self.progress = ttk.Progressbar(self.frame, mode='indeterminate')
        self.progress.grid(row=2, column=2, padx=10, pady=10, sticky="ew")
        self.progress.grid_remove()

        columns = ("VulnerabilityID", "CVE_ID", "SeverityLevel", "Description", "Actions")
        self.tree = ttk.Treeview(self.frame, columns=columns, show="headings", height=10)

        headers = ["Vulnerability ID", "CVE ID", "Description", "Severity Level", "Actions"]
        for col, header in zip(columns, headers):
            self.tree.heading(col, text=header)
            self.tree.column(col, anchor="center", width=150)

        self.tree.grid(row=3, column=0, columnspan=3, padx=10, pady=10, sticky="ew")
        self.tree.bind("<Button-1>", self.on_action_click)

    def fetch_vulnerabilities(self):
        self.fetch_button.config(state=tk.DISABLED)
        self.progress.grid()
        self.progress.start()

        def fetch():
            self.controller.fetch_and_store_cve_list()
            self.progress.stop()
            self.progress.grid_remove()
            self.fetch_button.config(state=tk.NORMAL)
            self.load_data()
            messagebox.showinfo("Success", "Vulnerabilities fetched successfully!")

        threading.Thread(target=fetch, daemon=True).start()

    def load_data(self):
        for row in self.tree.get_children():
            self.tree.delete(row)

        vulnerabilities = self.controller.get_all_vulnerabilities()
        for vuln in vulnerabilities:
            self.tree.insert("", "end", values=(vuln[0], vuln[1], vuln[2], vuln[3], "Edit | Delete"))

    def search_vulnerability(self):
        query = self.search_entry.get().strip().lower()
        for row in self.tree.get_children():
            self.tree.delete(row)

        vulnerabilities = self.controller.get_all_vulnerabilities()
        for vuln in vulnerabilities:
            if query in vuln[1].lower() or query in vuln[2].lower():
                self.tree.insert("", "end", values=(vuln[0], vuln[1], vuln[2], vuln[3], "Edit | Delete"))

    def on_action_click(self, event):
        col = self.tree.identify_column(event.x)
        row_id = self.tree.identify_row(event.y)
        if not row_id or col != "#5":
            return

        item = self.tree.item(row_id, "values")
        if not item:
            return

        x, y, widget_width, widget_height = self.tree.bbox(row_id, "Actions")
        relative_x = event.x - x

        if relative_x < widget_width // 2:
            self.open_edit_vulnerability_popup(item)
        else:
            self.delete_vulnerability(item[0])

    def open_add_vulnerability_popup(self):
        popup = tk.Toplevel(self.parent)
        popup.title("Add Vulnerability")

        labels = ["CVE ID", "Severity Level", "Description"]
        entries = []
        for i, label in enumerate(labels):
            ttk.Label(popup, text=label).grid(row=i, column=0, padx=10, pady=5)
            entry = ttk.Entry(popup)
            entry.grid(row=i, column=1, padx=10, pady=5)
            entries.append(entry)

        def add_vulnerability():
            self.controller.add_vulnerability(entries[0].get(), entries[1].get(), entries[2].get())
            messagebox.showinfo("Success", "Vulnerability added successfully!")
            popup.destroy()
            self.load_data()

        ttk.Button(popup, text="Save", command=add_vulnerability).grid(row=len(labels), column=0, columnspan=2, pady=10)

    def delete_vulnerability(self, vulnerability_id):
        confirm = messagebox.askyesno("Confirm Delete",
                                      f"Are you sure you want to delete Vulnerability ID {vulnerability_id}?")
        if confirm:
            self.controller.delete_vulnerability(vulnerability_id)
            self.load_data()
            messagebox.showinfo("Success", "Vulnerability deleted successfully!")


def display(parent):
    VulnerabilityView(parent)
