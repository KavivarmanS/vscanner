import tkinter as tk
from tkinter import messagebox, ttk
from controllers.vulnerability_controller import VulnerabilityController

class VulnerabilityView:
    def __init__(self, root):
        self.root = root
        self.root.title("Vulnerability Manager")
        self.controller = VulnerabilityController(self)

        self.create_widgets()
        self.refresh_list()

    def create_widgets(self):
        tk.Label(self.root, text="Vulnerability ID:").grid(row=0, column=0)
        tk.Label(self.root, text="CVE ID:").grid(row=1, column=0)
        tk.Label(self.root, text="Severity Level:").grid(row=2, column=0)
        tk.Label(self.root, text="Description:").grid(row=3, column=0)

        self.vulnerability_id_entry = tk.Entry(self.root)
        self.vulnerability_id_entry.grid(row=0, column=1)

        self.cve_id_entry = tk.Entry(self.root)
        self.cve_id_entry.grid(row=1, column=1)

        self.severity_entry = tk.Entry(self.root)
        self.severity_entry.grid(row=2, column=1)

        self.description_entry = tk.Entry(self.root)
        self.description_entry.grid(row=3, column=1)



        tk.Button(self.root, text="Add", command=self.add_vulnerability).grid(row=4, column=0)
        tk.Button(self.root, text="Update", command=self.update_vulnerability).grid(row=4, column=1)
        tk.Button(self.root, text="Delete", command=self.delete_vulnerability).grid(row=4, column=2)
        tk.Button(self.root, text="Clear", command=self.clear).grid(row=4, column=3)

        self.tree = ttk.Treeview(self.root, columns=("CVE ID", "Severity", "Description"), show="headings")
        self.tree.heading("CVE ID", text="CVE ID")
        self.tree.heading("Severity", text="Severity")
        self.tree.heading("Description", text="Description")
        self.tree.grid(row=5, column=0, columnspan=3)
        self.tree.bind("<ButtonRelease-1>", self.on_select)

    def refresh_list(self):
        for row in self.tree.get_children():
            self.tree.delete(row)

        for row in self.controller.get_all_vulnerabilities():
            self.tree.insert("", "end", values=row)

    def on_select(self, event):
        selected = self.tree.focus()
        values = self.tree.item(selected, "values")

        if values:
            self.cve_id_entry.delete(0, tk.END)
            self.cve_id_entry.insert(0, values[0])

            self.severity_entry.delete(0, tk.END)
            self.severity_entry.insert(0, values[1])

            self.description_entry.delete(0, tk.END)
            self.description_entry.insert(0, values[2])

    def add_vulnerability(self):
        cve_id = self.cve_id_entry.get()
        severity = self.severity_entry.get()
        description = self.description_entry.get()

        if cve_id and severity and description:
            self.controller.add_vulnerability(cve_id, severity, description)
        else:
            messagebox.showerror("Error", "All fields are required")

    def update_vulnerability(self):
        cve_id = self.cve_id_entry.get()
        severity = self.severity_entry.get()
        description = self.description_entry.get()

        if cve_id and severity and description:
            self.controller.update_vulnerability(cve_id, severity, description)
        else:
            messagebox.showerror("Error", "All fields are required")

    def delete_vulnerability(self):
        vulnerability_id = self.vulnerability_id_entry.get()
        if vulnerability_id:
            self.controller.delete_vulnerability(vulnerability_id)
        else:
            messagebox.showerror("Error", "Vulnerability ID is required")

    def clear(self):
        self.cve_id_entry.delete(0, tk.END)
        self.severity_entry.delete(0, tk.END)
        self.description_entry.delete(0, tk.END)