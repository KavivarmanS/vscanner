import tkinter as tk
from tkinter import ttk, messagebox
from controllers.vulnerability_controller import VulnerabilityController
from views.Theme import light_theme, dark_theme
import threading
from models.session import Session
from tkinter import Toplevel

def display(parent, theme, bg_color):
    parent.pack_propagate(False)
    parent.grid_rowconfigure(0, weight=1)
    parent.grid_columnconfigure(0, weight=1)

    view = VulnerabilityView(parent, theme, bg_color)
    view.frame.pack(fill=tk.BOTH, expand=True)
    return view

class VulnerabilityView:
    def __init__(self, parent, theme="light", bg_color="#ffffff"):
        self.parent = parent
        self.controller = VulnerabilityController(self)
        self.theme = theme
        self.bg_color = bg_color
        self.light_theme = light_theme
        self.dark_theme = dark_theme
        self.session = Session()
        self.create_widgets()
        self.load_data()
        self.apply_theme()
        self.fetch_popup = None

    def apply_theme(self):
        theme = self.dark_theme if self.theme == "dark" else self.light_theme

        self.parent.configure(bg=self.bg_color)
        self.frame.configure(style="Custom.TFrame")
        self.sidebar.configure(style="Custom.TFrame")
        self.main_frame.configure(style="Custom.TFrame")

        style = ttk.Style()
        style.configure("Custom.TFrame", background=self.bg_color)
        style.configure("Custom.TLabel", background=self.bg_color, foreground=theme.fg_color)
        style.configure(theme.button_style, font=("Arial", 12), padding=10, background=theme.btn_bg, foreground=theme.btn_fg)
        style.configure("Custom.TEntry", fieldbackground=theme.entry_bg, foreground=theme.entry_fg)
        style.configure("Custom.Treeview", background=self.bg_color, foreground=theme.fg_color, fieldbackground=self.bg_color)
        style.configure("Custom.TText", background=theme.entry_bg, foreground=theme.entry_fg)
        style.configure("Treeview.Heading", background=theme.header_bg, foreground=theme.header_fg, font=("Arial", 12, "bold"))

        highlight_color = "#3da69c" if self.theme == "light" else "#444444"
        style.map("Custom.Treeview", background=[("selected", highlight_color)])

        scrollbar_bg = theme.entry_bg
        scrollbar_troughcolor = theme.bg_color
        style.configure("Custom.Vertical.TScrollbar", background=scrollbar_bg, troughcolor=scrollbar_troughcolor)

        self.description_text.configure(bg=theme.entry_bg, fg=theme.entry_fg)
        self.search_entry.configure(style="Custom.TEntry")
        self.clear_button.configure(style=theme.button_style)

        for widget in self.sidebar.winfo_children():
            if isinstance(widget, ttk.Label):
                widget.configure(style="Custom.TLabel")
            elif isinstance(widget, ttk.Button):
                widget.configure(style=theme.button_style)
            elif isinstance(widget, ttk.Entry):
                widget.configure(style="Custom.TEntry")

        for widget in self.main_frame.winfo_children():
            if isinstance(widget, ttk.Label):
                widget.configure(style="Custom.TLabel")
            elif isinstance(widget, ttk.Treeview):
                widget.configure(style="Custom.Treeview")
            elif isinstance(widget, tk.Text):
                widget.configure(bg=theme.entry_bg, fg=theme.entry_fg)

        self.scrollbar.configure(style="Custom.Vertical.TScrollbar")

    def update_theme(self, new_theme, new_bg_color):
        self.theme = new_theme
        self.bg_color = new_bg_color
        self.apply_theme()

    def create_widgets(self):
        self.frame = ttk.Frame(self.parent, padding=20)
        self.frame.pack(expand=True, fill=tk.BOTH)

        self.frame.columnconfigure(1, weight=1)
        self.frame.rowconfigure(0, weight=1)

        self.sidebar = ttk.Frame(self.frame, padding=10)
        self.sidebar.grid(row=0, column=0, sticky="ns")

        ttk.Label(self.sidebar, text="Vulnerabilities", font=("Arial", 16, "bold")).pack(pady=10)

        self.search_frame = ttk.Frame(self.sidebar)
        self.search_frame.pack(pady=5, fill=tk.X)

        self.search_entry = ttk.Entry(self.search_frame)
        self.search_entry.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.search_entry.bind("<KeyRelease>", lambda event: self.search_vulnerability())

        self.clear_button = ttk.Button(self.search_frame, text="‚ùå", command=self.clear_search)
        self.clear_button.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

        self.search_entry.insert(0, "Search vulnerabilities...")
        self.search_entry.bind("<FocusIn>", self.on_entry_click)
        self.search_entry.bind("<FocusOut>", self.on_focus_out)

        if self.session.get_role() == "admin":
            ttk.Button(self.sidebar, text="Add Vulnerability", command=self.open_add_vulnerability_popup).pack(pady=5, fill=tk.X)
            self.fetch_button = ttk.Button(self.sidebar, text="Fetch Vulnerabilities", command=self.fetch_vulnerabilities)
            self.fetch_button.pack(pady=5, fill=tk.X)

        self.main_frame = ttk.Frame(self.frame)
        self.main_frame.grid(row=0, column=1, sticky="nsew", padx=10, pady=10)

        self.frame.columnconfigure(1, weight=3)
        self.main_frame.columnconfigure(0, weight=1)
        self.main_frame.rowconfigure(0, weight=1)

        columns = ("VulnerabilityID", "CVE_ID", "SeverityLevel", "Description")
        if self.session.get_role() == "admin":
            columns += ("Actions",)
        self.tree = ttk.Treeview(self.main_frame, columns=columns, show="headings", height=10)

        headers = ["ID", "CVE ID", "Severity", "Description"]
        if self.session.get_role() == "admin":
            headers += ["Actions"]
        for col, header in zip(columns, headers):
            self.tree.heading(col, text=header)
            self.tree.column(col, anchor="center", width=150)

        self.tree.grid(row=0, column=0, sticky="nsew")

        self.scrollbar = ttk.Scrollbar(self.main_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscroll=self.scrollbar.set)
        self.scrollbar.grid(row=0, column=1, sticky="ns")

        self.tree.bind("<ButtonRelease-1>", self.on_row_select)
        if self.session.get_role() == "admin":
            self.tree.bind("<ButtonRelease-1>", self.on_action_click, add="+")

        self.description_label = ttk.Label(self.main_frame, text="Description:", font=("Arial", 12, "bold"))
        self.description_label.grid(row=1, column=0, sticky="w", pady=5)
        self.description_text = tk.Text(self.main_frame, height=5, state=tk.DISABLED, wrap=tk.WORD)
        self.description_text.grid(row=2, column=0, columnspan=2, sticky="nsew", padx=10)

    def on_entry_click(self, event):
        if self.search_entry.get() == "Search vulnerabilities...":
            self.search_entry.delete(0, tk.END)

    def on_focus_out(self, event=None):
        if not self.search_entry.get():
            self.search_entry.insert(0, "Search vulnerabilities...")

    def clear_search(self):
        self.search_entry.delete(0, tk.END)
        self.on_focus_out()
        self.load_data()

    def load_data(self):
        for row in self.tree.get_children():
            self.tree.delete(row)

        vulnerabilities = self.controller.get_all_vulnerabilities()
        for vuln in vulnerabilities:
            values = (vuln[0], vuln[1], vuln[2], vuln[3])
            if self.session.get_role() == "admin":
                values += ("‚úèÔ∏è | üóëÔ∏è",)
            self.tree.insert("", "end", values=values)

    def on_action_click(self, event):
        item = self.tree.identify_row(event.y)
        column = self.tree.identify_column(event.x)
        if not item or not column:
            return

        item_values = self.tree.item(item, "values")
        if column == "#5":
            if "‚úèÔ∏è" in item_values[4]:
                self.open_edit_vulnerability_popup(item_values)
            elif "üóëÔ∏è" in item_values[4]:
                self.delete_vulnerability(item_values[0])

    def search_vulnerability(self, event=None):
        query = self.search_entry.get().strip().lower()
        for row in self.tree.get_children():
            self.tree.delete(row)

        vulnerabilities = self.controller.get_all_vulnerabilities()
        for vuln in vulnerabilities:
            if any(query in str(value).lower() for value in vuln):
                values = (vuln[0], vuln[1], vuln[2], vuln[3])
                if self.session.get_role() == "admin":
                    values += ("‚úèÔ∏è | üóëÔ∏è",)
                self.tree.insert("", "end", values=values)

    def on_row_select(self, event):
        selected_item = self.tree.selection()
        if not selected_item:
            return

        item_values = self.tree.item(selected_item, "values")
        if item_values:
            self.description_text.config(state=tk.NORMAL)
            self.description_text.delete(1.0, tk.END)
            self.description_text.insert(tk.END, item_values[3])
            self.description_text.config(state=tk.DISABLED)

    def open_add_vulnerability_popup(self):
        popup = tk.Toplevel(self.parent)
        popup.title("Add Vulnerability")

        labels = ["CVE ID", "Severity Level", "Description"]
        entries = []
        for i, label in enumerate(labels):
            ttk.Label(popup, text=label).grid(row=i, column=0, padx=10, pady=5)
            entry = ttk.Entry(popup)
            entry.grid(row=i, column=1, padx=10, pady=5)
            entries.append(entry)

        def add_vulnerability():
            self.controller.add_vulnerability(entries[0].get(), entries[1].get(), entries[2].get())
            messagebox.showinfo("Success", "Vulnerability added successfully!")
            popup.destroy()
            self.load_data()

        ttk.Button(popup, text="Save", command=add_vulnerability).grid(row=len(labels), column=0, columnspan=2, pady=10)
        self.apply_theme_to_popup(popup)
        self.center_popup(popup)

    def delete_vulnerability(self, vulnerability_id):
        confirm = messagebox.askyesno("Confirm Delete", f"Are you sure you want to delete Vulnerability ID {vulnerability_id}?")
        if confirm:
            self.controller.delete_vulnerability(vulnerability_id)
            self.load_data()
            messagebox.showinfo("Success", "Vulnerability deleted successfully!")

    def open_edit_vulnerability_popup(self, vuln_data):
        popup = tk.Toplevel(self.parent)
        popup.title("Edit Vulnerability")

        labels = ["CVE ID", "Severity Level", "Description"]
        entries = []
        for i, label in enumerate(labels):
            ttk.Label(popup, text=label).grid(row=i, column=0, padx=10, pady=5)
            entry = ttk.Entry(popup)
            entry.insert(0, vuln_data[i + 1])
            entry.grid(row=i, column=1, padx=10, pady=5)
            entries.append(entry)

        def save_changes():
            self.controller.update_vulnerability(vuln_data[0], entries[0].get(), entries[1].get(), entries[2].get())
            messagebox.showinfo("Success", "Vulnerability updated successfully!")
            popup.destroy()
            self.load_data()

        ttk.Button(popup, text="Save", command=save_changes).grid(row=len(labels), column=0, columnspan=2, pady=10)
        self.apply_theme_to_popup(popup)
        self.center_popup(popup)

    def apply_theme_to_popup(self, popup):
        theme = self.light_theme if self.theme == "light" else self.dark_theme

        style = ttk.Style()
        style.configure(theme.button_style, font=("Arial", 12), padding=10, background=theme.btn_bg, foreground=theme.btn_fg)
        style.configure(theme.entry_style, fieldbackground=theme.entry_bg, foreground=theme.entry_fg)

        popup.configure(bg=theme.bg_color)
        for widget in popup.winfo_children():
            if isinstance(widget, ttk.Label):
                widget.configure(background=theme.bg_color, foreground=theme.fg_color)
            elif isinstance(widget, ttk.Entry):
                widget.configure(style=theme.entry_style)
            elif isinstance(widget, ttk.Button):
                widget.configure(style=theme.button_style)

    def center_popup(self, popup):
        popup.update_idletasks()
        width = popup.winfo_width()
        height = popup.winfo_height()
        x = (popup.winfo_screenwidth() // 2) - (width // 2)
        y = (popup.winfo_screenheight() // 2) - (height // 2)
        popup.geometry(f"{width}x{height}+{x}+{y}")

    def add_recode(self, cve_id, severity, description):
        values = ("", cve_id, severity, description)
        if self.session.get_role() == "admin":
            values += ("‚úèÔ∏è | üóëÔ∏è",)
    def open_fetch_popup(self):
        self.fetch_popup = Toplevel(self.parent)
        self.fetch_popup.title("Fetching Vulnerabilities")
        self.fetch_popup.geometry("400x200")

        ttk.Label(self.fetch_popup, text="Fetching vulnerabilities...").pack(pady=10)

        self.fetch_progress = ttk.Progressbar(self.fetch_popup, orient="horizontal", mode="determinate")
        self.fetch_progress.pack(pady=10, fill=tk.X)

        self.progress_label = ttk.Label(self.fetch_popup, text="0% completed")
        self.progress_label.pack(pady=10)

        self.cancel_button = ttk.Button(self.fetch_popup, text="Cancel", command=self.cancel_fetch)
        self.cancel_button.pack(pady=10)

        self.fetch_popup.protocol("WM_DELETE_WINDOW", self.cancel_fetch)
        self.apply_theme_to_popup(self.fetch_popup)
        self.center_popup(self.fetch_popup)

    def fetch_vulnerabilities(self):
        self.open_fetch_popup()
        self.fetch_button.config(state=tk.DISABLED)
        self.fetch_progress.start()

        def fetch():
            self.controller.fetch_and_store_cve_list(self.update_progress)
            self.fetch_popup.destroy()
            self.fetch_button.config(state=tk.NORMAL)

        self.fetch_thread = threading.Thread(target=fetch, daemon=True)
        self.fetch_thread.start()

    def update_progress(self, current, total):
        self.fetch_progress['value'] = (current / total) * 100
        percentage = (current / total) * 100
        self.progress_label.config(text=f"{percentage:.2f}% completed, {total - current} remaining")

    def cancel_fetch(self):
        if self.fetch_thread.is_alive():
            messagebox.showinfo("Cancelled", "Fetch operation cancelled.")
        self.fetch_popup.destroy()
        self.fetch_button.config(state=tk.NORMAL)